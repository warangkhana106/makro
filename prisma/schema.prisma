// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum RefundType {
  POINT
  BANK
}

model User {
  id                Int                @id @default(autoincrement())
  role              Role               @default(USER)
  name              String?
  email             String             @unique
  phone             String?
  password          String
  identityNumber    String?
  branchNumber      String?
  refund            RefundType?
  point             Int                @default(0)
  shippingAddresses Shipping_Address[]
  products          Product[]
  favorites         Favorite[]
  cart              Cart?
  orders            Order[]
}

model Shipping_Address {
  id             Int     @id @default(autoincrement())
  firstName      String  @map("first_name")
  lastName       String  @map("last_name")
  phone          String
  email          String?
  identityNumber String? @map("identity_number")
  company        String?
  branch         String?
  address        String
  apartment      String?
  postalCode     String  @map("postal_code")
  province       String
  district       String
  subDistrict    String  @map("sub_district")
  isMainAddress  Boolean @map("is_main_adderss")
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int     @map("user_id")
}

model Favorite {
  id               Int                @id @default(autoincrement())
  name             String
  user             User               @relation(fields: [userId], references: [id])
  userId           Int                @map("user_id")
  favoriteProducts Favorite_Product[]
}

model Favorite_Product {
  id         Int      @id @default(autoincrement())
  favorite   Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  favoriteId Int      @map("favorite_id")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  Int      @map("product_id")
}

model Cart {
  id                  Int            @id @default(autoincrement())
  totalBeforeDiscount Int            @default(0) @map("total_before_discount")
  discount            Int            @default(0)
  deliveryFee         Int            @default(0) @map("delivery_fee")
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int            @unique @map("user_id")
  cart_products       Cart_product[]
}

model Cart_product {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId    Int     @map("cart_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}

model Order_Product {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(1)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}

model Order {
  id                  Int             @id @default(autoincrement())
  totalBeforeDiscount Int             @default(0) @map("total_before_discount")
  discount            Int             @default(0)
  deliveryfee         Int             @default(0) @map("delivery_fee")
  total               Int             @default(0)
  createAt            DateTime        @default(now()) @map("create_at")
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int             @map("user_id")
  status              Status[]
  order_products      Order_Product[]
}

enum OrderStatus {
  UNPAID
  PREPARED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Status {
  id       Int         @id @default(autoincrement())
  status   OrderStatus @default(UNPAID)
  createAt DateTime    @default(now()) @map("create_at")
  order    Order       @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId  Int         @map("order_id")
}

model Product {
  id               Int                @id @default(autoincrement())
  stock            Int                @default(0)
  unit             Int                @default(1)
  priceHigh        Int                @map("price_high")
  minPriceHigh     Int                @map("min_price_high")
  priceMedium      Int?               @map("price_medium")
  minPriceMedium   Int?               @map("min_price_medium")
  priceLow         Int?               @map("price_low")
  minPriceLow      Int?               @map("min_price_low")
  detail           String
  width            Decimal
  height           Decimal
  depth            Decimal
  weight           Decimal
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int                @map("user_id")
  favoriteProducts Favorite_Product[]
  cart_products    Cart_product[]
  order_products    Order_Product[]
}

model Promotion {
  id               Int @id @default(autoincrement())
  name             String
  bannerUrl        String? @map("banner_url")
  discount         Int?
  point            Int?
}
 model Product_Img {
  id Int @id @default(autoincrement())
  url String
 }
 model Category {
  id Int @id @default(autoincrement())
  name String
  count Int @default(0)
 }
 model Brand {
  id Int @id @default(autoincrement())
  name String
  count Int @default(0)
 }
